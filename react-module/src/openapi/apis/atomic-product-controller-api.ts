/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AtomicProductBasicDto } from '../models';
import { AtomicProductExtendedDto } from '../models';
import { FailableResourceAtomicProductExtendedDto } from '../models';
import { ForPack } from '../models';
/**
 * AtomicProductControllerApi - axios parameter creator
 * @export
 */
export const AtomicProductControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrDeleteObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling atPrDeleteObject.');
            }
            const localVarPath = `/api/atomic-product/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrGetObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling atPrGetObject.');
            }
            const localVarPath = `/api/atomic-product/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrGetObjectList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AtomicProductExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrSaveObject: async (body: AtomicProductExtendedDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling atPrSaveObject.');
            }
            const localVarPath = `/api/atomic-product/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} addBook 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookAtomicProductsList: async (addBook: boolean, storageAreaId: number, amount: number, defId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addBook' is not null or undefined
            if (addBook === null || addBook === undefined) {
                throw new RequiredError('addBook','Required parameter addBook was null or undefined when calling bookAtomicProductsList.');
            }
            // verify required parameter 'storageAreaId' is not null or undefined
            if (storageAreaId === null || storageAreaId === undefined) {
                throw new RequiredError('storageAreaId','Required parameter storageAreaId was null or undefined when calling bookAtomicProductsList.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling bookAtomicProductsList.');
            }
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling bookAtomicProductsList.');
            }
            const localVarPath = `/api/atomic-product/book-warehouse-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addBook !== undefined) {
                localVarQueryParameter['addBook'] = addBook;
            }

            if (storageAreaId !== undefined) {
                localVarQueryParameter['storageAreaId'] = storageAreaId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromTemplate: async (id: number, amount: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createFromTemplate.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling createFromTemplate.');
            }
            const localVarPath = `/api/atomic-product/create-from-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} atomicProductDefinitionId 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAtomicProductFromWarehouse: async (atomicProductDefinitionId: number, storageAreaId: number, amount: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'atomicProductDefinitionId' is not null or undefined
            if (atomicProductDefinitionId === null || atomicProductDefinitionId === undefined) {
                throw new RequiredError('atomicProductDefinitionId','Required parameter atomicProductDefinitionId was null or undefined when calling createNewAtomicProductFromWarehouse.');
            }
            // verify required parameter 'storageAreaId' is not null or undefined
            if (storageAreaId === null || storageAreaId === undefined) {
                throw new RequiredError('storageAreaId','Required parameter storageAreaId was null or undefined when calling createNewAtomicProductFromWarehouse.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling createNewAtomicProductFromWarehouse.');
            }
            const localVarPath = `/api/atomic-product/create-from-warehouse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (atomicProductDefinitionId !== undefined) {
                localVarQueryParameter['atomicProductDefinitionId'] = atomicProductDefinitionId;
            }

            if (storageAreaId !== undefined) {
                localVarQueryParameter['storageAreaId'] = storageAreaId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array&lt;number&gt;} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByIdsForAtomicProductDefinition: async (ids: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling getAllByIdsForAtomicProductDefinition.');
            }
            const localVarPath = `/api/atomic-product/get-all-by-ids-for-atomic-product-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWithBaseCategory: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product/all-with-base-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} [packId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAtomicProductsForProductionOrder: async (productionOrderId: number, packId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling getAtomicProductsForProductionOrder.');
            }
            const localVarPath = `/api/atomic-product/products-for-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productionOrderId !== undefined) {
                localVarQueryParameter['productionOrderId'] = productionOrderId;
            }

            if (packId !== undefined) {
                localVarQueryParameter['packId'] = packId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} barcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByBarcodeForPack: async (barcode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'barcode' is not null or undefined
            if (barcode === null || barcode === undefined) {
                throw new RequiredError('barcode','Required parameter barcode was null or undefined when calling getByBarcodeForPack.');
            }
            const localVarPath = `/api/atomic-product/get-by-barcode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (barcode !== undefined) {
                localVarQueryParameter['barcode'] = barcode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialInputProducts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product/potential-input-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialOutputProducts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product/potential-output-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAtomicProductList: async (storageAreaId: number, amount: number, defId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageAreaId' is not null or undefined
            if (storageAreaId === null || storageAreaId === undefined) {
                throw new RequiredError('storageAreaId','Required parameter storageAreaId was null or undefined when calling issueAtomicProductList.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling issueAtomicProductList.');
            }
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling issueAtomicProductList.');
            }
            const localVarPath = `/api/atomic-product/issue-from-warehouse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storageAreaId !== undefined) {
                localVarQueryParameter['storageAreaId'] = storageAreaId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} storageAreaIdFrom 
         * @param {number} storageAreaIdTo 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAtomicProductsList: async (storageAreaIdFrom: number, storageAreaIdTo: number, amount: number, defId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageAreaIdFrom' is not null or undefined
            if (storageAreaIdFrom === null || storageAreaIdFrom === undefined) {
                throw new RequiredError('storageAreaIdFrom','Required parameter storageAreaIdFrom was null or undefined when calling transferAtomicProductsList.');
            }
            // verify required parameter 'storageAreaIdTo' is not null or undefined
            if (storageAreaIdTo === null || storageAreaIdTo === undefined) {
                throw new RequiredError('storageAreaIdTo','Required parameter storageAreaIdTo was null or undefined when calling transferAtomicProductsList.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling transferAtomicProductsList.');
            }
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling transferAtomicProductsList.');
            }
            const localVarPath = `/api/atomic-product/transfer-between-location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storageAreaIdFrom !== undefined) {
                localVarQueryParameter['storageAreaIdFrom'] = storageAreaIdFrom;
            }

            if (storageAreaIdTo !== undefined) {
                localVarQueryParameter['storageAreaIdTo'] = storageAreaIdTo;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtomicProductControllerApi - functional programming interface
 * @export
 */
export const AtomicProductControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrDeleteObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).atPrDeleteObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrGetObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AtomicProductExtendedDto>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).atPrGetObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrGetObjectList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).atPrGetObjectList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AtomicProductExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrSaveObject(body: AtomicProductExtendedDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceAtomicProductExtendedDto>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).atPrSaveObject(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {boolean} addBook 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookAtomicProductsList(addBook: boolean, storageAreaId: number, amount: number, defId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).bookAtomicProductsList(addBook, storageAreaId, amount, defId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromTemplate(id: number, amount: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).createFromTemplate(id, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} atomicProductDefinitionId 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAtomicProductFromWarehouse(atomicProductDefinitionId: number, storageAreaId: number, amount: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).createNewAtomicProductFromWarehouse(atomicProductDefinitionId, storageAreaId, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array&lt;number&gt;} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByIdsForAtomicProductDefinition(ids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductExtendedDto>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getAllByIdsForAtomicProductDefinition(ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWithBaseCategory(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getAllWithBaseCategory(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} [packId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAtomicProductsForProductionOrder(productionOrderId: number, packId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForPack>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getAtomicProductsForProductionOrder(productionOrderId, packId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} barcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByBarcodeForPack(barcode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForPack>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getByBarcodeForPack(barcode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPotentialInputProducts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getPotentialInputProducts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPotentialOutputProducts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).getPotentialOutputProducts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueAtomicProductList(storageAreaId: number, amount: number, defId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).issueAtomicProductList(storageAreaId, amount, defId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} storageAreaIdFrom 
         * @param {number} storageAreaIdTo 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferAtomicProductsList(storageAreaIdFrom: number, storageAreaIdTo: number, amount: number, defId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductControllerApiAxiosParamCreator(configuration).transferAtomicProductsList(storageAreaIdFrom, storageAreaIdTo, amount, defId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AtomicProductControllerApi - factory interface
 * @export
 */
export const AtomicProductControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrDeleteObject(id: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).atPrDeleteObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrGetObject(id: number, options?: any): AxiosPromise<AtomicProductExtendedDto> {
            return AtomicProductControllerApiFp(configuration).atPrGetObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrGetObjectList(options?: any): AxiosPromise<Array<AtomicProductBasicDto>> {
            return AtomicProductControllerApiFp(configuration).atPrGetObjectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AtomicProductExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrSaveObject(body: AtomicProductExtendedDto, options?: any): AxiosPromise<FailableResourceAtomicProductExtendedDto> {
            return AtomicProductControllerApiFp(configuration).atPrSaveObject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} addBook 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookAtomicProductsList(addBook: boolean, storageAreaId: number, amount: number, defId: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).bookAtomicProductsList(addBook, storageAreaId, amount, defId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromTemplate(id: number, amount: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).createFromTemplate(id, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} atomicProductDefinitionId 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAtomicProductFromWarehouse(atomicProductDefinitionId: number, storageAreaId: number, amount: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).createNewAtomicProductFromWarehouse(atomicProductDefinitionId, storageAreaId, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array&lt;number&gt;} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByIdsForAtomicProductDefinition(ids: Array<number>, options?: any): AxiosPromise<Array<AtomicProductExtendedDto>> {
            return AtomicProductControllerApiFp(configuration).getAllByIdsForAtomicProductDefinition(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWithBaseCategory(options?: any): AxiosPromise<Array<AtomicProductBasicDto>> {
            return AtomicProductControllerApiFp(configuration).getAllWithBaseCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} [packId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAtomicProductsForProductionOrder(productionOrderId: number, packId?: number, options?: any): AxiosPromise<Array<ForPack>> {
            return AtomicProductControllerApiFp(configuration).getAtomicProductsForProductionOrder(productionOrderId, packId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} barcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByBarcodeForPack(barcode: string, options?: any): AxiosPromise<ForPack> {
            return AtomicProductControllerApiFp(configuration).getByBarcodeForPack(barcode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialInputProducts(options?: any): AxiosPromise<Array<AtomicProductBasicDto>> {
            return AtomicProductControllerApiFp(configuration).getPotentialInputProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialOutputProducts(options?: any): AxiosPromise<Array<AtomicProductBasicDto>> {
            return AtomicProductControllerApiFp(configuration).getPotentialOutputProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} storageAreaId 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAtomicProductList(storageAreaId: number, amount: number, defId: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).issueAtomicProductList(storageAreaId, amount, defId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} storageAreaIdFrom 
         * @param {number} storageAreaIdTo 
         * @param {number} amount 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAtomicProductsList(storageAreaIdFrom: number, storageAreaIdTo: number, amount: number, defId: number, options?: any): AxiosPromise<string> {
            return AtomicProductControllerApiFp(configuration).transferAtomicProductsList(storageAreaIdFrom, storageAreaIdTo, amount, defId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtomicProductControllerApi - object-oriented interface
 * @export
 * @class AtomicProductControllerApi
 * @extends {BaseAPI}
 */
export class AtomicProductControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public atPrDeleteObject(id: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).atPrDeleteObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public atPrGetObject(id: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).atPrGetObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public atPrGetObjectList(options?: any) {
        return AtomicProductControllerApiFp(this.configuration).atPrGetObjectList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {AtomicProductExtendedDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public atPrSaveObject(body: AtomicProductExtendedDto, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).atPrSaveObject(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {boolean} addBook 
     * @param {number} storageAreaId 
     * @param {number} amount 
     * @param {number} defId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public bookAtomicProductsList(addBook: boolean, storageAreaId: number, amount: number, defId: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).bookAtomicProductsList(addBook, storageAreaId, amount, defId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public createFromTemplate(id: number, amount: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).createFromTemplate(id, amount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} atomicProductDefinitionId 
     * @param {number} storageAreaId 
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public createNewAtomicProductFromWarehouse(atomicProductDefinitionId: number, storageAreaId: number, amount: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).createNewAtomicProductFromWarehouse(atomicProductDefinitionId, storageAreaId, amount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array&lt;number&gt;} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getAllByIdsForAtomicProductDefinition(ids: Array<number>, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getAllByIdsForAtomicProductDefinition(ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getAllWithBaseCategory(options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getAllWithBaseCategory(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} productionOrderId 
     * @param {number} [packId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getAtomicProductsForProductionOrder(productionOrderId: number, packId?: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getAtomicProductsForProductionOrder(productionOrderId, packId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} barcode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getByBarcodeForPack(barcode: string, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getByBarcodeForPack(barcode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getPotentialInputProducts(options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getPotentialInputProducts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public getPotentialOutputProducts(options?: any) {
        return AtomicProductControllerApiFp(this.configuration).getPotentialOutputProducts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} storageAreaId 
     * @param {number} amount 
     * @param {number} defId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public issueAtomicProductList(storageAreaId: number, amount: number, defId: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).issueAtomicProductList(storageAreaId, amount, defId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} storageAreaIdFrom 
     * @param {number} storageAreaIdTo 
     * @param {number} amount 
     * @param {number} defId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductControllerApi
     */
    public transferAtomicProductsList(storageAreaIdFrom: number, storageAreaIdTo: number, amount: number, defId: number, options?: any) {
        return AtomicProductControllerApiFp(this.configuration).transferAtomicProductsList(storageAreaIdFrom, storageAreaIdTo, amount, defId, options).then((request) => request(this.axios, this.basePath));
    }
}
