/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AtomicProductDefinitionBasicDto } from '../models';
import { AtomicProductDefinitionExtendedDto } from '../models';
import { AtomicProductParameterExtendedDto } from '../models';
import { FailableResourceAtomicProductDefinitionExtendedDto } from '../models';
/**
 * AtomicProductDefinitionControllerApi - axios parameter creator
 * @export
 */
export const AtomicProductDefinitionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyDeleteObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling atPrTyDeleteObject.');
            }
            const localVarPath = `/api/atomic-product-type/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyGetObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling atPrTyGetObject.');
            }
            const localVarPath = `/api/atomic-product-type/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyGetObjectList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product-type/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AtomicProductDefinitionExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTySaveObject: async (body: AtomicProductDefinitionExtendedDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling atPrTySaveObject.');
            }
            const localVarPath = `/api/atomic-product-type/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} removeParamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParamFromDefinition: async (defId: number, removeParamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling deleteParamFromDefinition.');
            }
            // verify required parameter 'removeParamId' is not null or undefined
            if (removeParamId === null || removeParamId === undefined) {
                throw new RequiredError('removeParamId','Required parameter removeParamId was null or undefined when calling deleteParamFromDefinition.');
            }
            const localVarPath = `/api/atomic-product-type/delete-param-from-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            if (removeParamId !== undefined) {
                localVarQueryParameter['removeParamId'] = removeParamId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} parent 
         * @param {number} [maxInheritance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicProductDefinitionByParent: async (parent: number, maxInheritance?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling getAllAtomicProductDefinitionByParent.');
            }
            const localVarPath = `/api/atomic-product-type/get-by-parent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (maxInheritance !== undefined) {
                localVarQueryParameter['maxInheritance'] = maxInheritance;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} parent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicProductDefinitionsExcludeCurrent: async (parent: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parent' is not null or undefined
            if (parent === null || parent === undefined) {
                throw new RequiredError('parent','Required parameter parent was null or undefined when calling getAllAtomicProductDefinitionsExcludeCurrent.');
            }
            const localVarPath = `/api/atomic-product-type/get-all-types-exclude-current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitionsWithAtomicProductList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product-type/get-all-definitions-with-atomic-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitionsWithBaseCategory: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/atomic-product-type/get-all-definitions-with-base-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AtomicProductParameterExtendedDto} body 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDefinitionWithNewParameters: async (body: AtomicProductParameterExtendedDto, defId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveDefinitionWithNewParameters.');
            }
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling saveDefinitionWithNewParameters.');
            }
            const localVarPath = `/api/atomic-product-type/save-definition-with-new-parameters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} paramId 
         * @param {string} newValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveParamValueForDefinition: async (defId: number, paramId: number, newValue: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'defId' is not null or undefined
            if (defId === null || defId === undefined) {
                throw new RequiredError('defId','Required parameter defId was null or undefined when calling saveParamValueForDefinition.');
            }
            // verify required parameter 'paramId' is not null or undefined
            if (paramId === null || paramId === undefined) {
                throw new RequiredError('paramId','Required parameter paramId was null or undefined when calling saveParamValueForDefinition.');
            }
            // verify required parameter 'newValue' is not null or undefined
            if (newValue === null || newValue === undefined) {
                throw new RequiredError('newValue','Required parameter newValue was null or undefined when calling saveParamValueForDefinition.');
            }
            const localVarPath = `/api/atomic-product-type/save-edited-param-for-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (defId !== undefined) {
                localVarQueryParameter['defId'] = defId;
            }

            if (paramId !== undefined) {
                localVarQueryParameter['paramId'] = paramId;
            }

            if (newValue !== undefined) {
                localVarQueryParameter['newValue'] = newValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AtomicProductDefinitionControllerApi - functional programming interface
 * @export
 */
export const AtomicProductDefinitionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrTyDeleteObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).atPrTyDeleteObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrTyGetObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AtomicProductDefinitionExtendedDto>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).atPrTyGetObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrTyGetObjectList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductDefinitionBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).atPrTyGetObjectList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AtomicProductDefinitionExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async atPrTySaveObject(body: AtomicProductDefinitionExtendedDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceAtomicProductDefinitionExtendedDto>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).atPrTySaveObject(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} removeParamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParamFromDefinition(defId: number, removeParamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).deleteParamFromDefinition(defId, removeParamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} parent 
         * @param {number} [maxInheritance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAtomicProductDefinitionByParent(parent: number, maxInheritance?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductDefinitionBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).getAllAtomicProductDefinitionByParent(parent, maxInheritance, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} parent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAtomicProductDefinitionsExcludeCurrent(parent: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductDefinitionBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).getAllAtomicProductDefinitionsExcludeCurrent(parent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDefinitionsWithAtomicProductList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductDefinitionExtendedDto>>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).getAllDefinitionsWithAtomicProductList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDefinitionsWithBaseCategory(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AtomicProductDefinitionBasicDto>>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).getAllDefinitionsWithBaseCategory(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AtomicProductParameterExtendedDto} body 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveDefinitionWithNewParameters(body: AtomicProductParameterExtendedDto, defId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).saveDefinitionWithNewParameters(body, defId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} paramId 
         * @param {string} newValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveParamValueForDefinition(defId: number, paramId: number, newValue: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AtomicProductDefinitionControllerApiAxiosParamCreator(configuration).saveParamValueForDefinition(defId, paramId, newValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AtomicProductDefinitionControllerApi - factory interface
 * @export
 */
export const AtomicProductDefinitionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyDeleteObject(id: number, options?: any): AxiosPromise<string> {
            return AtomicProductDefinitionControllerApiFp(configuration).atPrTyDeleteObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyGetObject(id: number, options?: any): AxiosPromise<AtomicProductDefinitionExtendedDto> {
            return AtomicProductDefinitionControllerApiFp(configuration).atPrTyGetObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTyGetObjectList(options?: any): AxiosPromise<Array<AtomicProductDefinitionBasicDto>> {
            return AtomicProductDefinitionControllerApiFp(configuration).atPrTyGetObjectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AtomicProductDefinitionExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        atPrTySaveObject(body: AtomicProductDefinitionExtendedDto, options?: any): AxiosPromise<FailableResourceAtomicProductDefinitionExtendedDto> {
            return AtomicProductDefinitionControllerApiFp(configuration).atPrTySaveObject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} removeParamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParamFromDefinition(defId: number, removeParamId: number, options?: any): AxiosPromise<string> {
            return AtomicProductDefinitionControllerApiFp(configuration).deleteParamFromDefinition(defId, removeParamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} parent 
         * @param {number} [maxInheritance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicProductDefinitionByParent(parent: number, maxInheritance?: number, options?: any): AxiosPromise<Array<AtomicProductDefinitionBasicDto>> {
            return AtomicProductDefinitionControllerApiFp(configuration).getAllAtomicProductDefinitionByParent(parent, maxInheritance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} parent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicProductDefinitionsExcludeCurrent(parent: number, options?: any): AxiosPromise<Array<AtomicProductDefinitionBasicDto>> {
            return AtomicProductDefinitionControllerApiFp(configuration).getAllAtomicProductDefinitionsExcludeCurrent(parent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitionsWithAtomicProductList(options?: any): AxiosPromise<Array<AtomicProductDefinitionExtendedDto>> {
            return AtomicProductDefinitionControllerApiFp(configuration).getAllDefinitionsWithAtomicProductList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefinitionsWithBaseCategory(options?: any): AxiosPromise<Array<AtomicProductDefinitionBasicDto>> {
            return AtomicProductDefinitionControllerApiFp(configuration).getAllDefinitionsWithBaseCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AtomicProductParameterExtendedDto} body 
         * @param {number} defId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDefinitionWithNewParameters(body: AtomicProductParameterExtendedDto, defId: number, options?: any): AxiosPromise<string> {
            return AtomicProductDefinitionControllerApiFp(configuration).saveDefinitionWithNewParameters(body, defId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} defId 
         * @param {number} paramId 
         * @param {string} newValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveParamValueForDefinition(defId: number, paramId: number, newValue: string, options?: any): AxiosPromise<string> {
            return AtomicProductDefinitionControllerApiFp(configuration).saveParamValueForDefinition(defId, paramId, newValue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AtomicProductDefinitionControllerApi - object-oriented interface
 * @export
 * @class AtomicProductDefinitionControllerApi
 * @extends {BaseAPI}
 */
export class AtomicProductDefinitionControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public atPrTyDeleteObject(id: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).atPrTyDeleteObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public atPrTyGetObject(id: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).atPrTyGetObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public atPrTyGetObjectList(options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).atPrTyGetObjectList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {AtomicProductDefinitionExtendedDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public atPrTySaveObject(body: AtomicProductDefinitionExtendedDto, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).atPrTySaveObject(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} defId 
     * @param {number} removeParamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public deleteParamFromDefinition(defId: number, removeParamId: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).deleteParamFromDefinition(defId, removeParamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} parent 
     * @param {number} [maxInheritance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public getAllAtomicProductDefinitionByParent(parent: number, maxInheritance?: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).getAllAtomicProductDefinitionByParent(parent, maxInheritance, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} parent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public getAllAtomicProductDefinitionsExcludeCurrent(parent: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).getAllAtomicProductDefinitionsExcludeCurrent(parent, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public getAllDefinitionsWithAtomicProductList(options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).getAllDefinitionsWithAtomicProductList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public getAllDefinitionsWithBaseCategory(options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).getAllDefinitionsWithBaseCategory(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {AtomicProductParameterExtendedDto} body 
     * @param {number} defId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public saveDefinitionWithNewParameters(body: AtomicProductParameterExtendedDto, defId: number, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).saveDefinitionWithNewParameters(body, defId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} defId 
     * @param {number} paramId 
     * @param {string} newValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AtomicProductDefinitionControllerApi
     */
    public saveParamValueForDefinition(defId: number, paramId: number, newValue: string, options?: any) {
        return AtomicProductDefinitionControllerApiFp(this.configuration).saveParamValueForDefinition(defId, paramId, newValue, options).then((request) => request(this.axios, this.basePath));
    }
}
