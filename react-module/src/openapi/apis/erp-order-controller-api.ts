/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FailableResourceInteger } from '../models';
import { FailableResourceListAtomicOperationBasicDto } from '../models';
import { FailableResourceLong } from '../models';
import { FailableResourceOrderWithElements } from '../models';
import { FailableResourceOrderWithElementsAndLocalData } from '../models';
import { FailableResourceString } from '../models';
import { GidDto } from '../models';
import { OrderWithSingleElement } from '../models';
import { PagedResultErpOrder } from '../models';
import { PagedResultErpOrderWithCtx } from '../models';
import { ProductWithAmount } from '../models';
/**
 * ErpOrderControllerApi - axios parameter creator
 * @export
 */
export const ErpOrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalErpOrder: async (body: GidDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLocalErpOrder.');
            }
            const localVarPath = `/api/erp-order/createLocalOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductWithAmount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractAmountFromOrderElement: async (body: ProductWithAmount, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling extractAmountFromOrderElement.');
            }
            const localVarPath = `/api/erp-order/extractAmountFromOrderElement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderWithSingleElement} body 
         * @param {number} thickness 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductOrder: async (body: OrderWithSingleElement, thickness: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling generateProductOrder.');
            }
            // verify required parameter 'thickness' is not null or undefined
            if (thickness === null || thickness === undefined) {
                throw new RequiredError('thickness','Required parameter thickness was null or undefined when calling generateProductOrder.');
            }
            const localVarPath = `/api/erp-order/generate/{thickness}`
                .replace(`{${"thickness"}}`, encodeURIComponent(String(thickness)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicOperationByLocalOrder: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllAtomicOperationByLocalOrder.');
            }
            const localVarPath = `/api/erp-order/get-atomic-operation-by-local-erp-order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrder: async (type: number, company: number, number: number, counter: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getErpOrder.');
            }
            // verify required parameter 'company' is not null or undefined
            if (company === null || company === undefined) {
                throw new RequiredError('company','Required parameter company was null or undefined when calling getErpOrder.');
            }
            // verify required parameter 'number' is not null or undefined
            if (number === null || number === undefined) {
                throw new RequiredError('number','Required parameter number was null or undefined when calling getErpOrder.');
            }
            // verify required parameter 'counter' is not null or undefined
            if (counter === null || counter === undefined) {
                throw new RequiredError('counter','Required parameter counter was null or undefined when calling getErpOrder.');
            }
            const localVarPath = `/api/erp-order/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (counter !== undefined) {
                localVarQueryParameter['counter'] = counter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderList: async (queryType: string, searchQuery: string, pageNumber: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryType' is not null or undefined
            if (queryType === null || queryType === undefined) {
                throw new RequiredError('queryType','Required parameter queryType was null or undefined when calling getErpOrderList.');
            }
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling getErpOrderList.');
            }
            // verify required parameter 'pageNumber' is not null or undefined
            if (pageNumber === null || pageNumber === undefined) {
                throw new RequiredError('pageNumber','Required parameter pageNumber was null or undefined when calling getErpOrderList.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling getErpOrderList.');
            }
            const localVarPath = `/api/erp-order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (queryType !== undefined) {
                localVarQueryParameter['queryType'] = queryType;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {string} [orderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderListWithCtx: async (queryType: string, searchQuery: string, pageNumber: number, pageSize: number, orderState?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryType' is not null or undefined
            if (queryType === null || queryType === undefined) {
                throw new RequiredError('queryType','Required parameter queryType was null or undefined when calling getErpOrderListWithCtx.');
            }
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling getErpOrderListWithCtx.');
            }
            // verify required parameter 'pageNumber' is not null or undefined
            if (pageNumber === null || pageNumber === undefined) {
                throw new RequiredError('pageNumber','Required parameter pageNumber was null or undefined when calling getErpOrderListWithCtx.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling getErpOrderListWithCtx.');
            }
            const localVarPath = `/api/erp-order/listWithCtx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (queryType !== undefined) {
                localVarQueryParameter['queryType'] = queryType;
            }

            if (orderState !== undefined) {
                localVarQueryParameter['orderState'] = orderState;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderWithLocalData: async (type: number, company: number, number: number, counter: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getErpOrderWithLocalData.');
            }
            // verify required parameter 'company' is not null or undefined
            if (company === null || company === undefined) {
                throw new RequiredError('company','Required parameter company was null or undefined when calling getErpOrderWithLocalData.');
            }
            // verify required parameter 'number' is not null or undefined
            if (number === null || number === undefined) {
                throw new RequiredError('number','Required parameter number was null or undefined when calling getErpOrderWithLocalData.');
            }
            // verify required parameter 'counter' is not null or undefined
            if (counter === null || counter === undefined) {
                throw new RequiredError('counter','Required parameter counter was null or undefined when calling getErpOrderWithLocalData.');
            }
            const localVarPath = `/api/erp-order/getWithLocalData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (counter !== undefined) {
                localVarQueryParameter['counter'] = counter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateContractors: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/erp-order/admin/migrate-contractors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErpOrderControllerApi - functional programming interface
 * @export
 */
export const ErpOrderControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocalErpOrder(body: GidDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceString>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).createLocalErpOrder(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProductWithAmount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractAmountFromOrderElement(body: ProductWithAmount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceInteger>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).extractAmountFromOrderElement(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OrderWithSingleElement} body 
         * @param {number} thickness 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateProductOrder(body: OrderWithSingleElement, thickness: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceLong>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).generateProductOrder(body, thickness, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAtomicOperationByLocalOrder(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceListAtomicOperationBasicDto>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).getAllAtomicOperationByLocalOrder(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErpOrder(type: number, company: number, number: number, counter: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceOrderWithElements>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).getErpOrder(type, company, number, counter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErpOrderList(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultErpOrder>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).getErpOrderList(queryType, searchQuery, pageNumber, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {string} [orderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErpOrderListWithCtx(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, orderState?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultErpOrderWithCtx>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).getErpOrderListWithCtx(queryType, searchQuery, pageNumber, pageSize, orderState, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErpOrderWithLocalData(type: number, company: number, number: number, counter: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceOrderWithElementsAndLocalData>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).getErpOrderWithLocalData(type, company, number, counter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrateContractors(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ErpOrderControllerApiAxiosParamCreator(configuration).migrateContractors(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ErpOrderControllerApi - factory interface
 * @export
 */
export const ErpOrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {GidDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocalErpOrder(body: GidDto, options?: any): AxiosPromise<FailableResourceString> {
            return ErpOrderControllerApiFp(configuration).createLocalErpOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductWithAmount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractAmountFromOrderElement(body: ProductWithAmount, options?: any): AxiosPromise<FailableResourceInteger> {
            return ErpOrderControllerApiFp(configuration).extractAmountFromOrderElement(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderWithSingleElement} body 
         * @param {number} thickness 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductOrder(body: OrderWithSingleElement, thickness: number, options?: any): AxiosPromise<FailableResourceLong> {
            return ErpOrderControllerApiFp(configuration).generateProductOrder(body, thickness, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAtomicOperationByLocalOrder(id: number, options?: any): AxiosPromise<FailableResourceListAtomicOperationBasicDto> {
            return ErpOrderControllerApiFp(configuration).getAllAtomicOperationByLocalOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrder(type: number, company: number, number: number, counter: number, options?: any): AxiosPromise<FailableResourceOrderWithElements> {
            return ErpOrderControllerApiFp(configuration).getErpOrder(type, company, number, counter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderList(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, options?: any): AxiosPromise<PagedResultErpOrder> {
            return ErpOrderControllerApiFp(configuration).getErpOrderList(queryType, searchQuery, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} queryType 
         * @param {string} searchQuery 
         * @param {number} pageNumber 
         * @param {number} pageSize 
         * @param {string} [orderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderListWithCtx(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, orderState?: string, options?: any): AxiosPromise<PagedResultErpOrderWithCtx> {
            return ErpOrderControllerApiFp(configuration).getErpOrderListWithCtx(queryType, searchQuery, pageNumber, pageSize, orderState, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} type 
         * @param {number} company 
         * @param {number} number 
         * @param {number} counter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErpOrderWithLocalData(type: number, company: number, number: number, counter: number, options?: any): AxiosPromise<FailableResourceOrderWithElementsAndLocalData> {
            return ErpOrderControllerApiFp(configuration).getErpOrderWithLocalData(type, company, number, counter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateContractors(options?: any): AxiosPromise<void> {
            return ErpOrderControllerApiFp(configuration).migrateContractors(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErpOrderControllerApi - object-oriented interface
 * @export
 * @class ErpOrderControllerApi
 * @extends {BaseAPI}
 */
export class ErpOrderControllerApi extends BaseAPI {
    /**
     * 
     * @param {GidDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public createLocalErpOrder(body: GidDto, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).createLocalErpOrder(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ProductWithAmount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public extractAmountFromOrderElement(body: ProductWithAmount, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).extractAmountFromOrderElement(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {OrderWithSingleElement} body 
     * @param {number} thickness 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public generateProductOrder(body: OrderWithSingleElement, thickness: number, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).generateProductOrder(body, thickness, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public getAllAtomicOperationByLocalOrder(id: number, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).getAllAtomicOperationByLocalOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} type 
     * @param {number} company 
     * @param {number} number 
     * @param {number} counter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public getErpOrder(type: number, company: number, number: number, counter: number, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).getErpOrder(type, company, number, counter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} queryType 
     * @param {string} searchQuery 
     * @param {number} pageNumber 
     * @param {number} pageSize 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public getErpOrderList(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).getErpOrderList(queryType, searchQuery, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} queryType 
     * @param {string} searchQuery 
     * @param {number} pageNumber 
     * @param {number} pageSize 
     * @param {string} [orderState] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public getErpOrderListWithCtx(queryType: string, searchQuery: string, pageNumber: number, pageSize: number, orderState?: string, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).getErpOrderListWithCtx(queryType, searchQuery, pageNumber, pageSize, orderState, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} type 
     * @param {number} company 
     * @param {number} number 
     * @param {number} counter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public getErpOrderWithLocalData(type: number, company: number, number: number, counter: number, options?: any) {
        return ErpOrderControllerApiFp(this.configuration).getErpOrderWithLocalData(type, company, number, counter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErpOrderControllerApi
     */
    public migrateContractors(options?: any) {
        return ErpOrderControllerApiFp(this.configuration).migrateContractors(options).then((request) => request(this.axios, this.basePath));
    }
}
