/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ActionResourceListMachineCalendarTaskBasicDto } from '../models';
import { ActionResourceListMachineCalendarTaskCalendarDto } from '../models';
import { ActionResourceMachineCalendarTaskWithUserWorkTime } from '../models';
import { ActionResourceMachinesAndOperationTypesPage } from '../models';
import { CalendarFilters } from '../models';
import { FailableResourceMachineCalendarTaskExtendedDto } from '../models';
import { FailableResourceMachineCalendarTaskWithUserWorkTime } from '../models';
import { ForSaving } from '../models';
import { MachineCalendarTaskExtendedDto } from '../models';
import { MachineCalendarTaskWithUserWorkTime } from '../models';
import { MachinesAndOperationTypesList } from '../models';
/**
 * MachineCalendarTaskControllerApi - axios parameter creator
 * @export
 */
export const MachineCalendarTaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array&lt;number&gt;} atomicOperationsId 
         * @param {number} operationTypeId 
         * @param {string} optionGroup 
         * @param {string} duration 
         * @param {number} [machineId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMachineCalendarTasksForOperations: async (atomicOperationsId: Array<number>, operationTypeId: number, optionGroup: string, duration: string, machineId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'atomicOperationsId' is not null or undefined
            if (atomicOperationsId === null || atomicOperationsId === undefined) {
                throw new RequiredError('atomicOperationsId','Required parameter atomicOperationsId was null or undefined when calling createNewMachineCalendarTasksForOperations.');
            }
            // verify required parameter 'operationTypeId' is not null or undefined
            if (operationTypeId === null || operationTypeId === undefined) {
                throw new RequiredError('operationTypeId','Required parameter operationTypeId was null or undefined when calling createNewMachineCalendarTasksForOperations.');
            }
            // verify required parameter 'optionGroup' is not null or undefined
            if (optionGroup === null || optionGroup === undefined) {
                throw new RequiredError('optionGroup','Required parameter optionGroup was null or undefined when calling createNewMachineCalendarTasksForOperations.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling createNewMachineCalendarTasksForOperations.');
            }
            const localVarPath = `/api/machine-calendar-task/create-new-machine-calendar-tasks-for-operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (atomicOperationsId) {
                localVarQueryParameter['atomicOperationsId'] = atomicOperationsId;
            }

            if (machineId !== undefined) {
                localVarQueryParameter['machineId'] = machineId;
            }

            if (operationTypeId !== undefined) {
                localVarQueryParameter['operationTypeId'] = operationTypeId;
            }

            if (optionGroup !== undefined) {
                localVarQueryParameter['optionGroup'] = optionGroup;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MachinesAndOperationTypesList} body 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredList: async (body: MachinesAndOperationTypesList, sortBy?: string, direction?: string, pageSize?: number, pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getFilteredList.');
            }
            const localVarPath = `/api/machine-calendar-task/filtered-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CalendarFilters} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredListForCalendar: async (body: CalendarFilters, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getFilteredListForCalendar.');
            }
            const localVarPath = `/api/machine-calendar-task/filtered-list-for-calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryMachineTaskListByMachine: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getHistoryMachineTaskListByMachine.');
            }
            const localVarPath = `/api/machine-calendar-task/history-list-by-machine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastMachineTaskByMachine: async (machineId: number, userMlId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'machineId' is not null or undefined
            if (machineId === null || machineId === undefined) {
                throw new RequiredError('machineId','Required parameter machineId was null or undefined when calling getLastMachineTaskByMachine.');
            }
            // verify required parameter 'userMlId' is not null or undefined
            if (userMlId === null || userMlId === undefined) {
                throw new RequiredError('userMlId','Required parameter userMlId was null or undefined when calling getLastMachineTaskByMachine.');
            }
            const localVarPath = `/api/machine-calendar-task/last-task-by-machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (machineId !== undefined) {
                localVarQueryParameter['machineId'] = machineId;
            }

            if (userMlId !== undefined) {
                localVarQueryParameter['userMlId'] = userMlId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMLId 
         * @param {string} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachineTaskBySerialNumber: async (machineId: number, userMLId: number, serialNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'machineId' is not null or undefined
            if (machineId === null || machineId === undefined) {
                throw new RequiredError('machineId','Required parameter machineId was null or undefined when calling getMachineTaskBySerialNumber.');
            }
            // verify required parameter 'userMLId' is not null or undefined
            if (userMLId === null || userMLId === undefined) {
                throw new RequiredError('userMLId','Required parameter userMLId was null or undefined when calling getMachineTaskBySerialNumber.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getMachineTaskBySerialNumber.');
            }
            const localVarPath = `/api/machine-calendar-task/get-task-by-serial-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (machineId !== undefined) {
                localVarQueryParameter['machineId'] = machineId;
            }

            if (userMLId !== undefined) {
                localVarQueryParameter['userMLId'] = userMLId;
            }

            if (serialNumber !== undefined) {
                localVarQueryParameter['serialNumber'] = serialNumber;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachineTaskListByMachine: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMachineTaskListByMachine.');
            }
            const localVarPath = `/api/machine-calendar-task/list-by-machine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} machineCalendarTaskId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewUserWorkTime: async (machineCalendarTaskId: number, userMlId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'machineCalendarTaskId' is not null or undefined
            if (machineCalendarTaskId === null || machineCalendarTaskId === undefined) {
                throw new RequiredError('machineCalendarTaskId','Required parameter machineCalendarTaskId was null or undefined when calling getNewUserWorkTime.');
            }
            // verify required parameter 'userMlId' is not null or undefined
            if (userMlId === null || userMlId === undefined) {
                throw new RequiredError('userMlId','Required parameter userMlId was null or undefined when calling getNewUserWorkTime.');
            }
            const localVarPath = `/api/machine-calendar-task/new-user-work-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (machineCalendarTaskId !== undefined) {
                localVarQueryParameter['machineCalendarTaskId'] = machineCalendarTaskId;
            }

            if (userMlId !== undefined) {
                localVarQueryParameter['userMlId'] = userMlId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaDeleteObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling maCaTaDeleteObject.');
            }
            const localVarPath = `/api/machine-calendar-task/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaGetObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling maCaTaGetObject.');
            }
            const localVarPath = `/api/machine-calendar-task/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaGetObjectList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/machine-calendar-task/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MachineCalendarTaskExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaSaveObject: async (body: MachineCalendarTaskExtendedDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling maCaTaSaveObject.');
            }
            const localVarPath = `/api/machine-calendar-task/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForSaving} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWithAtomicOperations: async (body: ForSaving, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveWithAtomicOperations.');
            }
            const localVarPath = `/api/machine-calendar-task/save-with-atomic-operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MachineCalendarTaskWithUserWorkTime} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWithUserWorkTime: async (body: MachineCalendarTaskWithUserWorkTime, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveWithUserWorkTime.');
            }
            const localVarPath = `/api/machine-calendar-task/save-with-user-work-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array&lt;ForSaving&gt;} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAll: async (body: Array<ForSaving>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAll.');
            }
            const localVarPath = `/api/machine-calendar-task/updateAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MachineCalendarTaskControllerApi - functional programming interface
 * @export
 */
export const MachineCalendarTaskControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array&lt;number&gt;} atomicOperationsId 
         * @param {number} operationTypeId 
         * @param {string} optionGroup 
         * @param {string} duration 
         * @param {number} [machineId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMachineCalendarTasksForOperations(atomicOperationsId: Array<number>, operationTypeId: number, optionGroup: string, duration: string, machineId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).createNewMachineCalendarTasksForOperations(atomicOperationsId, operationTypeId, optionGroup, duration, machineId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MachinesAndOperationTypesList} body 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredList(body: MachinesAndOperationTypesList, sortBy?: string, direction?: string, pageSize?: number, pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResourceMachinesAndOperationTypesPage>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getFilteredList(body, sortBy, direction, pageSize, pageNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CalendarFilters} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredListForCalendar(body: CalendarFilters, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResourceListMachineCalendarTaskCalendarDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getFilteredListForCalendar(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoryMachineTaskListByMachine(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResourceListMachineCalendarTaskBasicDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getHistoryMachineTaskListByMachine(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastMachineTaskByMachine(machineId: number, userMlId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getLastMachineTaskByMachine(machineId, userMlId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMLId 
         * @param {string} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMachineTaskBySerialNumber(machineId: number, userMLId: number, serialNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getMachineTaskBySerialNumber(machineId, userMLId, serialNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMachineTaskListByMachine(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResourceListMachineCalendarTaskBasicDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getMachineTaskListByMachine(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} machineCalendarTaskId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewUserWorkTime(machineCalendarTaskId: number, userMlId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).getNewUserWorkTime(machineCalendarTaskId, userMlId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maCaTaDeleteObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).maCaTaDeleteObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maCaTaGetObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineCalendarTaskExtendedDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).maCaTaGetObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maCaTaGetObjectList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MachineCalendarTaskExtendedDto>>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).maCaTaGetObjectList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MachineCalendarTaskExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maCaTaSaveObject(body: MachineCalendarTaskExtendedDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceMachineCalendarTaskExtendedDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).maCaTaSaveObject(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ForSaving} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveWithAtomicOperations(body: ForSaving, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceMachineCalendarTaskExtendedDto>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).saveWithAtomicOperations(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MachineCalendarTaskWithUserWorkTime} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveWithUserWorkTime(body: MachineCalendarTaskWithUserWorkTime, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResourceMachineCalendarTaskWithUserWorkTime>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).saveWithUserWorkTime(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array&lt;ForSaving&gt;} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAll(body: Array<ForSaving>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await MachineCalendarTaskControllerApiAxiosParamCreator(configuration).updateAll(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MachineCalendarTaskControllerApi - factory interface
 * @export
 */
export const MachineCalendarTaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {Array&lt;number&gt;} atomicOperationsId 
         * @param {number} operationTypeId 
         * @param {string} optionGroup 
         * @param {string} duration 
         * @param {number} [machineId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMachineCalendarTasksForOperations(atomicOperationsId: Array<number>, operationTypeId: number, optionGroup: string, duration: string, machineId?: number, options?: any): AxiosPromise<string> {
            return MachineCalendarTaskControllerApiFp(configuration).createNewMachineCalendarTasksForOperations(atomicOperationsId, operationTypeId, optionGroup, duration, machineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MachinesAndOperationTypesList} body 
         * @param {string} [sortBy] 
         * @param {string} [direction] 
         * @param {number} [pageSize] 
         * @param {number} [pageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredList(body: MachinesAndOperationTypesList, sortBy?: string, direction?: string, pageSize?: number, pageNumber?: number, options?: any): AxiosPromise<ActionResourceMachinesAndOperationTypesPage> {
            return MachineCalendarTaskControllerApiFp(configuration).getFilteredList(body, sortBy, direction, pageSize, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CalendarFilters} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredListForCalendar(body: CalendarFilters, options?: any): AxiosPromise<ActionResourceListMachineCalendarTaskCalendarDto> {
            return MachineCalendarTaskControllerApiFp(configuration).getFilteredListForCalendar(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoryMachineTaskListByMachine(id: number, options?: any): AxiosPromise<ActionResourceListMachineCalendarTaskBasicDto> {
            return MachineCalendarTaskControllerApiFp(configuration).getHistoryMachineTaskListByMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastMachineTaskByMachine(machineId: number, userMlId: number, options?: any): AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime> {
            return MachineCalendarTaskControllerApiFp(configuration).getLastMachineTaskByMachine(machineId, userMlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} machineId 
         * @param {number} userMLId 
         * @param {string} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachineTaskBySerialNumber(machineId: number, userMLId: number, serialNumber: string, options?: any): AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime> {
            return MachineCalendarTaskControllerApiFp(configuration).getMachineTaskBySerialNumber(machineId, userMLId, serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachineTaskListByMachine(id: number, options?: any): AxiosPromise<ActionResourceListMachineCalendarTaskBasicDto> {
            return MachineCalendarTaskControllerApiFp(configuration).getMachineTaskListByMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} machineCalendarTaskId 
         * @param {number} userMlId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewUserWorkTime(machineCalendarTaskId: number, userMlId: number, options?: any): AxiosPromise<FailableResourceMachineCalendarTaskWithUserWorkTime> {
            return MachineCalendarTaskControllerApiFp(configuration).getNewUserWorkTime(machineCalendarTaskId, userMlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaDeleteObject(id: number, options?: any): AxiosPromise<string> {
            return MachineCalendarTaskControllerApiFp(configuration).maCaTaDeleteObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaGetObject(id: number, options?: any): AxiosPromise<MachineCalendarTaskExtendedDto> {
            return MachineCalendarTaskControllerApiFp(configuration).maCaTaGetObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaGetObjectList(options?: any): AxiosPromise<Array<MachineCalendarTaskExtendedDto>> {
            return MachineCalendarTaskControllerApiFp(configuration).maCaTaGetObjectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MachineCalendarTaskExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maCaTaSaveObject(body: MachineCalendarTaskExtendedDto, options?: any): AxiosPromise<FailableResourceMachineCalendarTaskExtendedDto> {
            return MachineCalendarTaskControllerApiFp(configuration).maCaTaSaveObject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForSaving} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWithAtomicOperations(body: ForSaving, options?: any): AxiosPromise<FailableResourceMachineCalendarTaskExtendedDto> {
            return MachineCalendarTaskControllerApiFp(configuration).saveWithAtomicOperations(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MachineCalendarTaskWithUserWorkTime} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveWithUserWorkTime(body: MachineCalendarTaskWithUserWorkTime, options?: any): AxiosPromise<ActionResourceMachineCalendarTaskWithUserWorkTime> {
            return MachineCalendarTaskControllerApiFp(configuration).saveWithUserWorkTime(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array&lt;ForSaving&gt;} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAll(body: Array<ForSaving>, options?: any): AxiosPromise<string> {
            return MachineCalendarTaskControllerApiFp(configuration).updateAll(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MachineCalendarTaskControllerApi - object-oriented interface
 * @export
 * @class MachineCalendarTaskControllerApi
 * @extends {BaseAPI}
 */
export class MachineCalendarTaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {Array&lt;number&gt;} atomicOperationsId 
     * @param {number} operationTypeId 
     * @param {string} optionGroup 
     * @param {string} duration 
     * @param {number} [machineId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public createNewMachineCalendarTasksForOperations(atomicOperationsId: Array<number>, operationTypeId: number, optionGroup: string, duration: string, machineId?: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).createNewMachineCalendarTasksForOperations(atomicOperationsId, operationTypeId, optionGroup, duration, machineId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MachinesAndOperationTypesList} body 
     * @param {string} [sortBy] 
     * @param {string} [direction] 
     * @param {number} [pageSize] 
     * @param {number} [pageNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getFilteredList(body: MachinesAndOperationTypesList, sortBy?: string, direction?: string, pageSize?: number, pageNumber?: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getFilteredList(body, sortBy, direction, pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CalendarFilters} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getFilteredListForCalendar(body: CalendarFilters, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getFilteredListForCalendar(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getHistoryMachineTaskListByMachine(id: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getHistoryMachineTaskListByMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} machineId 
     * @param {number} userMlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getLastMachineTaskByMachine(machineId: number, userMlId: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getLastMachineTaskByMachine(machineId, userMlId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} machineId 
     * @param {number} userMLId 
     * @param {string} serialNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getMachineTaskBySerialNumber(machineId: number, userMLId: number, serialNumber: string, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getMachineTaskBySerialNumber(machineId, userMLId, serialNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getMachineTaskListByMachine(id: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getMachineTaskListByMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} machineCalendarTaskId 
     * @param {number} userMlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public getNewUserWorkTime(machineCalendarTaskId: number, userMlId: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).getNewUserWorkTime(machineCalendarTaskId, userMlId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public maCaTaDeleteObject(id: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).maCaTaDeleteObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public maCaTaGetObject(id: number, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).maCaTaGetObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public maCaTaGetObjectList(options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).maCaTaGetObjectList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MachineCalendarTaskExtendedDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public maCaTaSaveObject(body: MachineCalendarTaskExtendedDto, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).maCaTaSaveObject(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ForSaving} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public saveWithAtomicOperations(body: ForSaving, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).saveWithAtomicOperations(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MachineCalendarTaskWithUserWorkTime} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public saveWithUserWorkTime(body: MachineCalendarTaskWithUserWorkTime, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).saveWithUserWorkTime(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array&lt;ForSaving&gt;} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineCalendarTaskControllerApi
     */
    public updateAll(body: Array<ForSaving>, options?: any) {
        return MachineCalendarTaskControllerApiFp(this.configuration).updateAll(body, options).then((request) => request(this.axios, this.basePath));
    }
}
