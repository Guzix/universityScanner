/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FailableResourceListScannedBarcodeVerification } from '../models';
import { FailableResourcePackExtendedDto } from '../models';
import { PackBasicDto } from '../models';
import { PackExtendedDto } from '../models';
/**
 * PackControllerApi - axios parameter creator
 * @export
 */
export const PackControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} packId 
         * @param {Array&lt;number&gt;} assignedProductIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateStatusForProducts: async (packId: number, assignedProductIds: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packId' is not null or undefined
            if (packId === null || packId === undefined) {
                throw new RequiredError('packId','Required parameter packId was null or undefined when calling calculateStatusForProducts.');
            }
            // verify required parameter 'assignedProductIds' is not null or undefined
            if (assignedProductIds === null || assignedProductIds === undefined) {
                throw new RequiredError('assignedProductIds','Required parameter assignedProductIds was null or undefined when calling calculateStatusForProducts.');
            }
            const localVarPath = `/api/pack/get-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packId !== undefined) {
                localVarQueryParameter['packId'] = packId;
            }

            if (assignedProductIds) {
                localVarQueryParameter['assignedProductIds'] = assignedProductIds;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packDeleteObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling packDeleteObject.');
            }
            const localVarPath = `/api/pack/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packGetObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling packGetObject.');
            }
            const localVarPath = `/api/pack/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packGetObjectList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pack/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PackExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packSaveObject: async (body: PackExtendedDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling packSaveObject.');
            }
            const localVarPath = `/api/pack/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackControllerApi - functional programming interface
 * @export
 */
export const PackControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} packId 
         * @param {Array&lt;number&gt;} assignedProductIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateStatusForProducts(packId: number, assignedProductIds: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceListScannedBarcodeVerification>> {
            const localVarAxiosArgs = await PackControllerApiAxiosParamCreator(configuration).calculateStatusForProducts(packId, assignedProductIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packDeleteObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await PackControllerApiAxiosParamCreator(configuration).packDeleteObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packGetObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackExtendedDto>> {
            const localVarAxiosArgs = await PackControllerApiAxiosParamCreator(configuration).packGetObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packGetObjectList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackBasicDto>>> {
            const localVarAxiosArgs = await PackControllerApiAxiosParamCreator(configuration).packGetObjectList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PackExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packSaveObject(body: PackExtendedDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourcePackExtendedDto>> {
            const localVarAxiosArgs = await PackControllerApiAxiosParamCreator(configuration).packSaveObject(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PackControllerApi - factory interface
 * @export
 */
export const PackControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} packId 
         * @param {Array&lt;number&gt;} assignedProductIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateStatusForProducts(packId: number, assignedProductIds: Array<number>, options?: any): AxiosPromise<FailableResourceListScannedBarcodeVerification> {
            return PackControllerApiFp(configuration).calculateStatusForProducts(packId, assignedProductIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packDeleteObject(id: number, options?: any): AxiosPromise<string> {
            return PackControllerApiFp(configuration).packDeleteObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packGetObject(id: number, options?: any): AxiosPromise<PackExtendedDto> {
            return PackControllerApiFp(configuration).packGetObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packGetObjectList(options?: any): AxiosPromise<Array<PackBasicDto>> {
            return PackControllerApiFp(configuration).packGetObjectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PackExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packSaveObject(body: PackExtendedDto, options?: any): AxiosPromise<FailableResourcePackExtendedDto> {
            return PackControllerApiFp(configuration).packSaveObject(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackControllerApi - object-oriented interface
 * @export
 * @class PackControllerApi
 * @extends {BaseAPI}
 */
export class PackControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} packId 
     * @param {Array&lt;number&gt;} assignedProductIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackControllerApi
     */
    public calculateStatusForProducts(packId: number, assignedProductIds: Array<number>, options?: any) {
        return PackControllerApiFp(this.configuration).calculateStatusForProducts(packId, assignedProductIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackControllerApi
     */
    public packDeleteObject(id: number, options?: any) {
        return PackControllerApiFp(this.configuration).packDeleteObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackControllerApi
     */
    public packGetObject(id: number, options?: any) {
        return PackControllerApiFp(this.configuration).packGetObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackControllerApi
     */
    public packGetObjectList(options?: any) {
        return PackControllerApiFp(this.configuration).packGetObjectList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {PackExtendedDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackControllerApi
     */
    public packSaveObject(body: PackExtendedDto, options?: any) {
        return PackControllerApiFp(this.configuration).packSaveObject(body, options).then((request) => request(this.axios, this.basePath));
    }
}
