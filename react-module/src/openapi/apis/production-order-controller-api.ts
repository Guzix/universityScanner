/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FailableResourceProductionOrderExtendedDto } from '../models';
import { FailableResourceProductionOrderWithProgress } from '../models';
import { FailableResourceVoid } from '../models';
import { NonErpProductionOrderParams } from '../models';
import { ProductionOrderBasicDto } from '../models';
import { ProductionOrderExtendedDto } from '../models';
import { ShapeAndDef } from '../models';
/**
 * ProductionOrderControllerApi - axios parameter creator
 * @export
 */
export const ProductionOrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} localErpOrderId 
         * @param {number} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignLocalErpOrder: async (productionOrderId: number, localErpOrderId: number, position: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling assignLocalErpOrder.');
            }
            // verify required parameter 'localErpOrderId' is not null or undefined
            if (localErpOrderId === null || localErpOrderId === undefined) {
                throw new RequiredError('localErpOrderId','Required parameter localErpOrderId was null or undefined when calling assignLocalErpOrder.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling assignLocalErpOrder.');
            }
            const localVarPath = `/api/production-order/assign-local-erp-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productionOrderId !== undefined) {
                localVarQueryParameter['productionOrderId'] = productionOrderId;
            }

            if (localErpOrderId !== undefined) {
                localVarQueryParameter['localErpOrderId'] = localErpOrderId;
            }

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} atomicProductDefinitionId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAddCompletedProductsFromType: async (productionOrderId: number, atomicProductDefinitionId: number, amount: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling createAndAddCompletedProductsFromType.');
            }
            // verify required parameter 'atomicProductDefinitionId' is not null or undefined
            if (atomicProductDefinitionId === null || atomicProductDefinitionId === undefined) {
                throw new RequiredError('atomicProductDefinitionId','Required parameter atomicProductDefinitionId was null or undefined when calling createAndAddCompletedProductsFromType.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling createAndAddCompletedProductsFromType.');
            }
            const localVarPath = `/api/production-order/create-and-add-completed-products-from-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productionOrderId !== undefined) {
                localVarQueryParameter['productionOrderId'] = productionOrderId;
            }

            if (atomicProductDefinitionId !== undefined) {
                localVarQueryParameter['atomicProductDefinitionId'] = atomicProductDefinitionId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedProduct: async (productionOrderId: number, completedProductId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling deleteCompletedProduct.');
            }
            // verify required parameter 'completedProductId' is not null or undefined
            if (completedProductId === null || completedProductId === undefined) {
                throw new RequiredError('completedProductId','Required parameter completedProductId was null or undefined when calling deleteCompletedProduct.');
            }
            const localVarPath = `/api/production-order/delete-completed-product/{productionOrderId}/{completedProductId}`
                .replace(`{${"productionOrderId"}}`, encodeURIComponent(String(productionOrderId)))
                .replace(`{${"completedProductId"}}`, encodeURIComponent(String(completedProductId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array&lt;number&gt;} body 
         * @param {number} productionOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManyCompletedProduct: async (body: Array<number>, productionOrderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteManyCompletedProduct.');
            }
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling deleteManyCompletedProduct.');
            }
            const localVarPath = `/api/production-order/delete-many-completed-product/{productionOrderId}`
                .replace(`{${"productionOrderId"}}`, encodeURIComponent(String(productionOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductWithSubEntities: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProductWithSubEntities.');
            }
            const localVarPath = `/api/production-order/delete-product-with-sub-entities/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NonErpProductionOrderParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateForNonErp: async (body: NonErpProductionOrderParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling generateForNonErp.');
            }
            const localVarPath = `/api/production-order/generate-for-non-erp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductsFromCompleteProduct: async (productionOrderId: number, completedProductId: number, amount: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productionOrderId' is not null or undefined
            if (productionOrderId === null || productionOrderId === undefined) {
                throw new RequiredError('productionOrderId','Required parameter productionOrderId was null or undefined when calling generateProductsFromCompleteProduct.');
            }
            // verify required parameter 'completedProductId' is not null or undefined
            if (completedProductId === null || completedProductId === undefined) {
                throw new RequiredError('completedProductId','Required parameter completedProductId was null or undefined when calling generateProductsFromCompleteProduct.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling generateProductsFromCompleteProduct.');
            }
            const localVarPath = `/api/production-order/generate-products-from-completed-product/{productionOrderId}/{completedProductId}/{amount}`
                .replace(`{${"productionOrderId"}}`, encodeURIComponent(String(productionOrderId)))
                .replace(`{${"completedProductId"}}`, encodeURIComponent(String(completedProductId)))
                .replace(`{${"amount"}}`, encodeURIComponent(String(amount)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [contractorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByContractor: async (contractorId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/production-order/get-by-contractor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contractorId !== undefined) {
                localVarQueryParameter['contractorId'] = contractorId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} nonErpOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonAssignedForNonErpOrder: async (nonErpOrderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nonErpOrderId' is not null or undefined
            if (nonErpOrderId === null || nonErpOrderId === undefined) {
                throw new RequiredError('nonErpOrderId','Required parameter nonErpOrderId was null or undefined when calling getNonAssignedForNonErpOrder.');
            }
            const localVarPath = `/api/production-order/get-non-assigned-for-non-erp-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nonErpOrderId !== undefined) {
                localVarQueryParameter['nonErpOrderId'] = nonErpOrderId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectWithProgress: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getObjectWithProgress.');
            }
            const localVarPath = `/api/production-order/get-object-with-progres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrDeleteObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling prOrDeleteObject.');
            }
            const localVarPath = `/api/production-order/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrGetObject: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling prOrGetObject.');
            }
            const localVarPath = `/api/production-order/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrGetObjectList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/production-order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductionOrderExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrSaveObject: async (body: ProductionOrderExtendedDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling prOrSaveObject.');
            }
            const localVarPath = `/api/production-order/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShapeAndDef} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProductionOrderShapeAndDef: async (body: ShapeAndDef, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling saveProductionOrderShapeAndDef.');
            }
            const localVarPath = `/api/production-order/save-production-order-production-order-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductionOrderControllerApi - functional programming interface
 * @export
 */
export const ProductionOrderControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} localErpOrderId 
         * @param {number} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignLocalErpOrder(productionOrderId: number, localErpOrderId: number, position: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).assignLocalErpOrder(productionOrderId, localErpOrderId, position, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} atomicProductDefinitionId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndAddCompletedProductsFromType(productionOrderId: number, atomicProductDefinitionId: number, amount: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).createAndAddCompletedProductsFromType(productionOrderId, atomicProductDefinitionId, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompletedProduct(productionOrderId: number, completedProductId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceVoid>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).deleteCompletedProduct(productionOrderId, completedProductId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array&lt;number&gt;} body 
         * @param {number} productionOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManyCompletedProduct(body: Array<number>, productionOrderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceVoid>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).deleteManyCompletedProduct(body, productionOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductWithSubEntities(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceVoid>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).deleteProductWithSubEntities(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NonErpProductionOrderParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateForNonErp(body: NonErpProductionOrderParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).generateForNonErp(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateProductsFromCompleteProduct(productionOrderId: number, completedProductId: number, amount: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceVoid>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).generateProductsFromCompleteProduct(productionOrderId, completedProductId, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [contractorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByContractor(contractorId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductionOrderBasicDto>>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).getByContractor(contractorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} nonErpOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonAssignedForNonErpOrder(nonErpOrderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductionOrderBasicDto>>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).getNonAssignedForNonErpOrder(nonErpOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObjectWithProgress(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceProductionOrderWithProgress>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).getObjectWithProgress(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prOrDeleteObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).prOrDeleteObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prOrGetObject(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductionOrderExtendedDto>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).prOrGetObject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prOrGetObjectList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductionOrderBasicDto>>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).prOrGetObjectList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProductionOrderExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prOrSaveObject(body: ProductionOrderExtendedDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceProductionOrderExtendedDto>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).prOrSaveObject(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ShapeAndDef} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveProductionOrderShapeAndDef(body: ShapeAndDef, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FailableResourceProductionOrderExtendedDto>> {
            const localVarAxiosArgs = await ProductionOrderControllerApiAxiosParamCreator(configuration).saveProductionOrderShapeAndDef(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductionOrderControllerApi - factory interface
 * @export
 */
export const ProductionOrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} localErpOrderId 
         * @param {number} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignLocalErpOrder(productionOrderId: number, localErpOrderId: number, position: number, options?: any): AxiosPromise<string> {
            return ProductionOrderControllerApiFp(configuration).assignLocalErpOrder(productionOrderId, localErpOrderId, position, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} atomicProductDefinitionId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAddCompletedProductsFromType(productionOrderId: number, atomicProductDefinitionId: number, amount: number, options?: any): AxiosPromise<string> {
            return ProductionOrderControllerApiFp(configuration).createAndAddCompletedProductsFromType(productionOrderId, atomicProductDefinitionId, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedProduct(productionOrderId: number, completedProductId: number, options?: any): AxiosPromise<FailableResourceVoid> {
            return ProductionOrderControllerApiFp(configuration).deleteCompletedProduct(productionOrderId, completedProductId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array&lt;number&gt;} body 
         * @param {number} productionOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManyCompletedProduct(body: Array<number>, productionOrderId: number, options?: any): AxiosPromise<FailableResourceVoid> {
            return ProductionOrderControllerApiFp(configuration).deleteManyCompletedProduct(body, productionOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductWithSubEntities(productId: number, options?: any): AxiosPromise<FailableResourceVoid> {
            return ProductionOrderControllerApiFp(configuration).deleteProductWithSubEntities(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NonErpProductionOrderParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateForNonErp(body: NonErpProductionOrderParams, options?: any): AxiosPromise<string> {
            return ProductionOrderControllerApiFp(configuration).generateForNonErp(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productionOrderId 
         * @param {number} completedProductId 
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateProductsFromCompleteProduct(productionOrderId: number, completedProductId: number, amount: number, options?: any): AxiosPromise<FailableResourceVoid> {
            return ProductionOrderControllerApiFp(configuration).generateProductsFromCompleteProduct(productionOrderId, completedProductId, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [contractorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByContractor(contractorId?: number, options?: any): AxiosPromise<Array<ProductionOrderBasicDto>> {
            return ProductionOrderControllerApiFp(configuration).getByContractor(contractorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} nonErpOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonAssignedForNonErpOrder(nonErpOrderId: number, options?: any): AxiosPromise<Array<ProductionOrderBasicDto>> {
            return ProductionOrderControllerApiFp(configuration).getNonAssignedForNonErpOrder(nonErpOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectWithProgress(id: number, options?: any): AxiosPromise<FailableResourceProductionOrderWithProgress> {
            return ProductionOrderControllerApiFp(configuration).getObjectWithProgress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrDeleteObject(id: number, options?: any): AxiosPromise<string> {
            return ProductionOrderControllerApiFp(configuration).prOrDeleteObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrGetObject(id: number, options?: any): AxiosPromise<ProductionOrderExtendedDto> {
            return ProductionOrderControllerApiFp(configuration).prOrGetObject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrGetObjectList(options?: any): AxiosPromise<Array<ProductionOrderBasicDto>> {
            return ProductionOrderControllerApiFp(configuration).prOrGetObjectList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductionOrderExtendedDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prOrSaveObject(body: ProductionOrderExtendedDto, options?: any): AxiosPromise<FailableResourceProductionOrderExtendedDto> {
            return ProductionOrderControllerApiFp(configuration).prOrSaveObject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShapeAndDef} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveProductionOrderShapeAndDef(body: ShapeAndDef, options?: any): AxiosPromise<FailableResourceProductionOrderExtendedDto> {
            return ProductionOrderControllerApiFp(configuration).saveProductionOrderShapeAndDef(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductionOrderControllerApi - object-oriented interface
 * @export
 * @class ProductionOrderControllerApi
 * @extends {BaseAPI}
 */
export class ProductionOrderControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} productionOrderId 
     * @param {number} localErpOrderId 
     * @param {number} position 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public assignLocalErpOrder(productionOrderId: number, localErpOrderId: number, position: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).assignLocalErpOrder(productionOrderId, localErpOrderId, position, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} productionOrderId 
     * @param {number} atomicProductDefinitionId 
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public createAndAddCompletedProductsFromType(productionOrderId: number, atomicProductDefinitionId: number, amount: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).createAndAddCompletedProductsFromType(productionOrderId, atomicProductDefinitionId, amount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} productionOrderId 
     * @param {number} completedProductId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public deleteCompletedProduct(productionOrderId: number, completedProductId: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).deleteCompletedProduct(productionOrderId, completedProductId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array&lt;number&gt;} body 
     * @param {number} productionOrderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public deleteManyCompletedProduct(body: Array<number>, productionOrderId: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).deleteManyCompletedProduct(body, productionOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public deleteProductWithSubEntities(productId: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).deleteProductWithSubEntities(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {NonErpProductionOrderParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public generateForNonErp(body: NonErpProductionOrderParams, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).generateForNonErp(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} productionOrderId 
     * @param {number} completedProductId 
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public generateProductsFromCompleteProduct(productionOrderId: number, completedProductId: number, amount: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).generateProductsFromCompleteProduct(productionOrderId, completedProductId, amount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [contractorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public getByContractor(contractorId?: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).getByContractor(contractorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} nonErpOrderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public getNonAssignedForNonErpOrder(nonErpOrderId: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).getNonAssignedForNonErpOrder(nonErpOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public getObjectWithProgress(id: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).getObjectWithProgress(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public prOrDeleteObject(id: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).prOrDeleteObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public prOrGetObject(id: number, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).prOrGetObject(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public prOrGetObjectList(options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).prOrGetObjectList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ProductionOrderExtendedDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public prOrSaveObject(body: ProductionOrderExtendedDto, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).prOrSaveObject(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ShapeAndDef} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionOrderControllerApi
     */
    public saveProductionOrderShapeAndDef(body: ShapeAndDef, options?: any) {
        return ProductionOrderControllerApiFp(this.configuration).saveProductionOrderShapeAndDef(body, options).then((request) => request(this.axios, this.basePath));
    }
}
